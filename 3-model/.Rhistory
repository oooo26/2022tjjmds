"东莞" = 23.048884,
"广州" = 23.125178,
"佛山" = 23.028762
)
xy <- data %>%
transmute(
x = as.numeric(x_coords[city]),
y = as.numeric(y_coords[city])
)
xy <- SpatialPoints(xy)
# neighbor
n <- nrow(data) %/% 3
nb <- knn2nb(knearneigh(xy, k = n*2-1))
# weight by dist
# w <- c(rep(1, n-1), rep(0.5, n))
dlist <- nbdists(nb, xy)
dlist <- lapply(dlist, function(x){x[x == 0] = 0.1;x})
print(dlist)
dlist <- lapply(dlist, function(x){1/x})
nb2listw(nb, dlist)
}
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
listW <- compute_w(data)
listW$weights %>% sapply(function(x){x}) %>% t
compute_w <- function(data){
# add spatial information
x_coords <- list(
"东莞" = 113.760234,
"广州" = 113.280637,
"佛山" = 113.122717
)
y_coords <- list(
"东莞" = 23.048884,
"广州" = 23.125178,
"佛山" = 23.028762
)
xy <- data %>%
transmute(
x = as.numeric(x_coords[city]),
y = as.numeric(y_coords[city])
)
xy <- SpatialPoints(xy)
# neighbor
n <- nrow(data) %/% 3
nb <- knn2nb(knearneigh(xy, k = n*2-1))
# weight by dist
# w <- c(rep(1, n-1), rep(0.5, n))
dlist <- nbdists(nb, xy)
dlist <- lapply(dlist, function(x){x[x == 0] = 0.01;x})
print(dlist)
dlist <- lapply(dlist, function(x){1/x})
nb2listw(nb, dlist)
}
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
listW$weights %>% sapply(function(x){x}) %>% t
compute_w <- function(data){
# add spatial information
x_coords <- list(
"东莞" = 113.760234,
"广州" = 113.280637,
"佛山" = 113.122717
)
y_coords <- list(
"东莞" = 23.048884,
"广州" = 23.125178,
"佛山" = 23.028762
)
xy <- data %>%
transmute(
x = as.numeric(x_coords[city]),
y = as.numeric(y_coords[city])
)
xy <- SpatialPoints(xy)
# neighbor
n <- nrow(data) %/% 3
nb <- knn2nb(knearneigh(xy, k = n*2-1))
# weight by dist
# w <- c(rep(1, n-1), rep(0.5, n))
dlist <- nbdists(nb, xy)
dlist <- lapply(dlist, function(x){x[x == 0] = 0.1;x})
print(dlist)
dlist <- lapply(dlist, function(x){1/x})
nb2listw(nb, dlist)
}
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
listW$weights %>% sapply(function(x){x}) %>% t
# moran
moran.test(score, listW)
compute_w <- function(data){
# add spatial information
x_coords <- list(
"东莞" = 113.760234,
"广州" = 113.280637,
"佛山" = 113.122717
)
y_coords <- list(
"东莞" = 23.048884,
"广州" = 23.125178,
"佛山" = 23.028762
)
xy <- data %>%
transmute(
x = as.numeric(x_coords[city]),
y = as.numeric(y_coords[city])
)
xy <- SpatialPoints(xy)
# neighbor
n <- nrow(data) %/% 3
nb <- knn2nb(knearneigh(xy, k = n*2-1))
# weight by dist
# w <- c(rep(1, n-1), rep(0.5, n))
dlist <- nbdists(nb, xy)
dlist <- lapply(dlist, function(x){x[x == 0] = 0.05;x})
print(dlist)
dlist <- lapply(dlist, function(x){1/x})
nb2listw(nb, dlist)
}
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
listW$weights %>% sapply(function(x){x}) %>% t
# moran
moran.test(score, listW)
?nb
?knearneigh
compute_w <- function(data){
# add spatial information
x_coords <- list(
"东莞" = 113.760234,
"广州" = 113.280637,
"佛山" = 113.122717
)
y_coords <- list(
"东莞" = 23.048884,
"广州" = 23.125178,
"佛山" = 23.028762
)
xy <- data %>%
transmute(
x = as.numeric(x_coords[city]),
y = as.numeric(y_coords[city])
)
xy <- SpatialPoints(xy)
# neighbor
n <- nrow(data) %/% 3
nb <- knn2nb(knearneigh(xy, k = n*2-1, longlat=T))
# weight by dist
dlist <- nbdists(nb, xy)
dlist <- lapply(dlist, function(x){x[x == 0] = 0.01;x})
dlist <- lapply(dlist, function(x){1/x})
nb2listw(nb, dlist)
}
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
listW$weights %>% sapply(function(x){x}) %>% t
?dnearneigh
dnearneigh(xy, longlat=T)
dnearneigh(xy,0,0.1, longlat=T)
nb <- dnearneigh(xy,0,0.1, longlat=T)
nb <- dnearneigh(xy,0, 1000, longlat=T)
nb <- dnearneigh(xy,0, 10, longlat=T)
nb <- dnearneigh(xy,0, 1, longlat=T)
nb <- dnearneigh(xy,0, 0.1, longlat=T)
nb <- dnearneigh(xy,0, 0.2, longlat=T)
nb <- dnearneigh(xy,0, 0.15, longlat=T)
nb <- dnearneigh(xy,0, 0.18, longlat=T)
nb <- dnearneigh(xy,0, 0.19, longlat=T)
nb <- dnearneigh(xy,0, 0.3, longlat=T)
nb <- dnearneigh(xy,0, 0.5, longlat=T)
compute_w <- function(data){
# add spatial information
x_coords <- list(
"东莞" = 113.760234,
"广州" = 113.280637,
"佛山" = 113.122717
)
y_coords <- list(
"东莞" = 23.048884,
"广州" = 23.125178,
"佛山" = 23.028762
)
xy <- data %>%
transmute(
x = as.numeric(x_coords[city]),
y = as.numeric(y_coords[city])
)
xy <- SpatialPoints(xy)
# neighbor
n <- nrow(data) %/% 3
nb <- dnearneigh(xy,0, 0.5, longlat=T)
print(sapply(nb, function(x){length(x)}))
# weight by dist
dlist <- nbdists(nb, xy)
dlist <- lapply(dlist, function(x){x[x == 0] = 0.01;x})
dlist <- lapply(dlist, function(x){1/x})
nb2listw(nb, dlist)
}
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
listW$weights %>% sapply(function(x){x}) %>% t
listW$weights %>% sapply(function(x){x}) %>% t
listW$weights %>% sapply(function(x){x})
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
data <- read_csv("./selected.csv") %>% filter(年份>=2020)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
data <- read_csv("./selected.csv") #%>% filter(年份>=2020)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
?errorsarlm
data <- read_csv("./selected.csv") %>% filter(年份<2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
moran.plot(score, listW)
colSums(data)
colSums(data[2])
colSums(data[3])
colSums(data[4])
data <- read_csv("./selected.csv") %>% filter(年份<2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
print(listW$weights %>% sapply(function(x){x}))
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
# sdm
v <- colnames(vars)
model_summary <- lapply(
1:length(v),
function(i){
# cat(i)
errorsarlm(score ~ as.numeric(vars[,i]),
listw = listW,
Durbin = T) %>%
summary
}
)
result <-  tibble()
for (i in 1:length(v)){
result <- result %>%
rbind(tibble(
variable = v[i],
intercept = model_summary[[i]]$coefficients[1],
coef = model_summary[[i]]$coefficients[2],
lag.coef = model_summary[[i]]$coefficients[3],
Wald.statistic = model_summary[[i]]$Wald1$statistic,
Wald.p.value = model_summary[[i]]$Wald1$p.value,
LR.statistic = model_summary[[i]]$LR1$statistic,
LR.p.value = model_summary[[i]]$LR1$p.value
))
}
result
saveRDS(result, file="before2017.rds")
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
# sdm
v <- colnames(vars)
model_summary <- lapply(
1:length(v),
function(i){
# cat(i)
errorsarlm(score ~ as.numeric(vars[,i]),
listw = listW,
Durbin = T) %>%
summary
}
)
result <-  tibble()
for (i in 1:length(v)){
result <- result %>%
rbind(tibble(
variable = v[i],
intercept = model_summary[[i]]$coefficients[1],
coef = model_summary[[i]]$coefficients[2],
lag.coef = model_summary[[i]]$coefficients[3],
Wald.statistic = model_summary[[i]]$Wald1$statistic,
Wald.p.value = model_summary[[i]]$Wald1$p.value,
LR.statistic = model_summary[[i]]$LR1$statistic,
LR.p.value = model_summary[[i]]$LR1$p.value
))
}
result
saveRDS(result, file="after2017.rds")
res1 <- readRDS("before2017.rds")
res2 <- readRDS("after2017.rds")
resdiff <- res1 %>%
select(variable) %>%
mutate(res2[2:4] - res1[2:4])
resdiff
res1 %>% knitr::kable("latex")
res2 %>% knitr::kable("latex")
res1 %>% select(-Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
res2 %>% select(-Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
View(data)
library(tidyverse)
library(spatialreg)
library(spdep)
compute_w <- function(data){
# add spatial information
x_coords <- list(
"东莞" = 113.760234,
"广州" = 113.280637,
"佛山" = 113.122717
)
y_coords <- list(
"东莞" = 23.048884,
"广州" = 23.125178,
"佛山" = 23.028762
)
xy <- data %>%
transmute(
x = as.numeric(x_coords[city]),
y = as.numeric(y_coords[city])
)
xy <- SpatialPoints(xy)
# neighbor
n <- nrow(data) %/% 3
nb <- dnearneigh(xy,0, 0.5, longlat=T)
print(sapply(nb, function(x){length(x)}))
# weight by dist
dlist <- nbdists(nb, xy)
dlist <- lapply(dlist, function(x){x[x == 0] = 0.01;x})
dlist <- lapply(dlist, function(x){1/x})
nb2listw(nb, dlist)
}
data <- read_csv("./selected.csv") %>% filter(年份>=2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
# sdm
v <- colnames(vars)
model_summary <- lapply(
1:length(v),
function(i){
# cat(i)
errorsarlm(score ~ as.numeric(vars[,i]),
listw = listW,
Durbin = T) %>%
summary
}
)
result <-  tibble()
for (i in 1:length(v)){
result <- result %>%
rbind(tibble(
variable = v[i],
intercept = model_summary[[i]]$coefficients[1],
coef = model_summary[[i]]$coefficients[2],
lag.coef = model_summary[[i]]$coefficients[3],
Wald.statistic = model_summary[[i]]$Wald1$statistic,
Wald.p.value = model_summary[[i]]$Wald1$p.value,
LR.statistic = model_summary[[i]]$LR1$statistic,
LR.p.value = model_summary[[i]]$LR1$p.value
))
}
result
saveRDS(result, file="after2017.rds")
data <- read_csv("./selected.csv") %>% filter(年份<2017)
data <- read_csv("./selected.csv") %>% filter(年份<2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
# sdm
v <- colnames(vars)
model_summary <- lapply(
1:length(v),
function(i){
# cat(i)
errorsarlm(score ~ as.numeric(vars[,i]),
listw = listW,
Durbin = T) %>%
summary
}
)
result <-  tibble()
for (i in 1:length(v)){
result <- result %>%
rbind(tibble(
variable = v[i],
intercept = model_summary[[i]]$coefficients[1],
coef = model_summary[[i]]$coefficients[2],
lag.coef = model_summary[[i]]$coefficients[3],
Wald.statistic = model_summary[[i]]$Wald1$statistic,
Wald.p.value = model_summary[[i]]$Wald1$p.value,
LR.statistic = model_summary[[i]]$LR1$statistic,
LR.p.value = model_summary[[i]]$LR1$p.value
))
}
result
saveRDS(result, file="before2017.rds")
data <- read_csv("./selected.csv")# %>% filter(年份<2017)
vars <- data %>% select(-city, -score, -年份) %>% scale
score <- data$score
listW <- compute_w(data)
print(listW$weights %>% sapply(function(x){x}))
# moran
moran.test(score, listW)
res1 <- readRDS("before2017.rds")
res2 <- readRDS("after2017.rds")
res1 %>% select(-Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
res1 %>% select(-Wald.p.value, -LR.p.value, -Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
res2 %>% select(-Wald.p.value, -LR.p.value, -Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
resdiff <- res1 %>%
select(variable) %>%
mutate(res2[2:4] - res1[2:4])
resdiff
res1 <- readRDS("before2017.rds")
res2 <- readRDS("after2017.rds")
res1 %>% select(-Wald.p.value, -LR.p.value, -Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
res2 %>% select(-Wald.p.value, -LR.p.value, -Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
library(tidyverse)
res1 %>% select(-Wald.p.value, -LR.p.value, -Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
res2 %>% select(-Wald.p.value, -LR.p.value, -Wald.statistic, -LR.statistic) %>% knitr::kable("latex")
resdiff <- res1 %>%
select(variable) %>%
mutate(res2[2:4] - res1[2:4])
resdiff
res_coef <- tibble(
variable = res1$variable,
`2011-2017` = res1$lag.coef,
`2017-2020` = res2$lag.coef
)
res_coef <- tibble(
variable = rep(res1$variable, 2),
rho = c(res1$lag.coef, res2$lag.coef),
time = c(rep(`2011-2016`, length(res1$variable)),
rep(`2017-2020`, length(res1$variable)))
)
res_coef <- tibble(
variable = rep(res1$variable, 2),
rho = c(res1$lag.coef, res2$lag.coef),
time = c(rep("2011-2016", length(res1$variable)),
rep("2017-2020", length(res1$variable)))
)
ggplot(res_coef, aes(x=variable, y=rho, color=time)) +
geom_bar()
?geom_bar
ggplot(res_coef, aes(x=variable, y=rho, color=time)) +
geom_col()
?geom_col
?position
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge")
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2")
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="single")
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2")
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2", width=0.5)
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2", width=0.4)
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2", width=0.8)
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2", width=0.8, orientation="y")
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2", width=0.7)
ggplot(res_coef, aes(x=variable, y=rho, fill=time)) +
geom_col(position="dodge2", width=0.7)
res_coef <- tibble(
variable = rep(res1$variable, 2),
rho = c(res1$lag.coef, res2$lag.coef),
year = c(rep("2011-2016", length(res1$variable)),
rep("2017-2020", length(res1$variable)))
)
ggplot(res_coef, aes(x=variable, y=rho, fill=year)) +
geom_col(position="dodge2", width=0.7)
ggsave("sdm.pdf", device = "pdf")
ggsave("sdm.pdf", device = "pdf", width=10, height=5)
